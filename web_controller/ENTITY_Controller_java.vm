## #set( $tools = $loader.newInstance("Tools") )
#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
## --- Primary Key arguments by getters, e.g. "review.getCustomerCode(), review.getBookId()"
#set( $pkElementsGetters = $fn.argumentsListWithGetter($uncapitalizedEntityName, $entity.keyAttributes) )
## --- Primary Key arguments, e.g. "customerCode, bookId"
#set( $pkElementsVariables = $fn.argumentsList($entity.keyAttributes) )
## --- Primary Key request path, e.g. "{customerCode}/{bookId}"
#set( $pkPath = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPath = "${pkPath}/" )
#end
#set( $pkPath = "${pkPath}{${attribute.name}}" )
#end
## --- Primary Key Path Variables, e.g. "@PathVariable("customerCode") String customerCode, @PathVariable("bookId") Integer bookId"
#set( $pkPathVariables = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPathVariables = "${pkPathVariables}, " )
#end
#set( $pkPathVariables = "${pkPathVariables}@PathVariable(${QUOT}${attribute.name}${QUOT}) $attribute.type $attribute.name" )
#end
## // ${DOLLAR}pkPath          = "$pkPath"
## // ${DOLLAR}pkPathVariables = "$pkPathVariables"
##
## --- Referenced entities (e.g. "Book", "Country", "Author", ... )
## #set( $referencedEntities = $tools.referencedEntityTypes($entity, $entity.attributes) )## All referenced entities (PK and NON PK)
## #set( $referencedNonPKEntities = $tools.referencedEntityTypes($entity, $entity.nonKeyAttributes) )## Entities referenced by NON PK fields
#set( $referencedEntities = $entity.referencedEntityTypes() )## All referenced entities (PK and NON PK)
#set( $referencedNonPKEntities = $entity.referencedEntityTypes($entity.nonKeyAttributes) )## Entities referenced by NON PK fields
## -----------------------------------------------------------------------------------------------------------------------------
## Key fields = fields in Primary Key    
#set( $keyFields = $entity.getAttributesByCriteria( $const.KEY ) )
##--------------------------------------------------------------------------------------------------------
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
## All fields ( ordered fiels : 1) fields in Primary Key 2) fields not in primary key    
#set( $allFields = $fn.concatLists($keyFields, $dataFields) )
##--------------------------------------------------------------------------------------------------------
## #set( $itemVariable = $fn.uncapitalize($entity.name) )
#set( $itemVariable = $fn.uncapitalize($entity.name) )
##--------------------------------------------------------------------------------------------------------

/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($SRC)};

#if ( $referencedEntities.size() > 0 )
import java.util.LinkedList;
#end
import java.util.List;
import java.util.Date;
import java.util.ArrayList;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.json.JSONObject;

import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

//--- Common classes
import ${ROOT_PKG}.web.common.AbstractController;
import ${ROOT_PKG}.web.common.FormMode;
import ${ROOT_PKG}.web.common.Message;
import ${ROOT_PKG}.web.common.MessageType;
import ${ROOT_PKG}.web.util.ParamUtil;

//-- Datatable
import ${ROOT_PKG}.web.datatable.enumerations.${entity.name}IndexEnum;
import ${ROOT_PKG}.web.datatable.commons.DataTableRequest;
import ${ROOT_PKG}.web.datatable.commons.DataTableResponse;

//--- Entities
import ${ENTITY_PKG}.${entity.name};
#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple imports for the same entity
import ${ENTITY_PKG}.$ref;
#end
#end

//--- Services 
import ${ROOT_PKG}.business.service.${entity.name}Service;
import ${ROOT_PKG}.data.repository.specifications.${entity.name}Specifications;

#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple imports for the same service
import ${ROOT_PKG}.business.service.${ref}Service;
#end
#end

#if ( $referencedEntities.size() > 0 )
//--- List Items 
#end
#foreach( $ref in $referencedEntities )
import ${ROOT_PKG}.web.listitem.${ref}ListItem;
#end

/**
 * Spring MVC controller for '${entity.name}' management.
 */
@Controller
@RequestMapping("/$uncapitalizedEntityName")
public class ${entity.name}Controller extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "${uncapitalizedEntityName}";
	private static final String MAIN_LIST_NAME   = "list";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_FORM   = "${uncapitalizedEntityName}/form";
	private static final String JSP_LIST   = "${uncapitalizedEntityName}/list";

	//--- SAVE ACTION ( in the HTML form )
	private static final String SAVE_ACTION_CREATE   = "/${uncapitalizedEntityName}/create";
	private static final String SAVE_ACTION_UPDATE   = "/${uncapitalizedEntityName}/update";

	//--- Main entity service
	@Resource
    private ${entity.name}Service ${uncapitalizedEntityName}Service; // Injected by Spring
	//--- Other service(s)
#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple declarations for the same service
	@Resource
    private ${ref}Service ${fn.uncapitalize(${ref})}Service; // Injected by Spring
#end
#end

	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public ${entity.name}Controller() {
		super(${entity.name}Controller.class, MAIN_ENTITY_NAME );
		log("${entity.name}Controller created.");
	}

	//--------------------------------------------------------------------------------------
	// Spring MVC model management
	//--------------------------------------------------------------------------------------
#foreach( $ref in $referencedEntities )
	/**
	 * Populates the combo-box "items" for the referenced entity "$ref"
	 * @param model
	 */
	private void populateListOf${ref}Items(Model model) {
		List<${ref}> list = ${fn.uncapitalize(${ref})}Service.findAll();
		List<${ref}ListItem> items = new LinkedList<${ref}ListItem>();
		for ( ${ref} $fn.uncapitalize(${ref}) : list ) {
			items.add(new ${ref}ListItem( $fn.uncapitalize(${ref}) ) );
		}
		model.addAttribute("listOf${ref}Items", items ) ;
	}

#end

	/**
	 * Populates the Spring MVC model with the given entity and eventually other useful data
	 * @param model
	 * @param $uncapitalizedEntityName
	 */
	private void populateModel(Model model, ${entity.name} $uncapitalizedEntityName, FormMode formMode) {
		//--- Main entity
		model.addAttribute(MAIN_ENTITY_NAME, $uncapitalizedEntityName);
		if ( formMode == FormMode.CREATE ) {
			model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE); 			
			//--- Other data useful in this screen in "create" mode (all fields)
#foreach( $ref in $referencedEntities )
			populateListOf${ref}Items(model);
#end
		}
		else if ( formMode == FormMode.UPDATE ) {
			model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE); 			
			//--- Other data useful in this screen in "update" mode (only non-pk fields)
#foreach( $ref in $referencedNonPKEntities )
			populateListOf${ref}Items(model);
#end
		}
	}

	//--------------------------------------------------------------------------------------
	// Request mapping
	//--------------------------------------------------------------------------------------
	/**
	 * Shows a list with all the occurrences of ${entity.name} found in the database
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping()
	public String list(Model model) {
		log("Action 'list'");
		List<${entity.name}> list = ${uncapitalizedEntityName}Service.findAll();
		model.addAttribute(MAIN_LIST_NAME, list);		
		return JSP_LIST;
	}

	/**
	 * Shows a form page in order to create a new ${entity.name}
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping("/form")
	public String formForCreate(Model model) {
		log("Action 'formForCreate'");
		//--- Populates the model with a new instance
		${entity.name} ${uncapitalizedEntityName} = new ${entity.name}();	
		populateModel( model, ${uncapitalizedEntityName}, FormMode.CREATE);
		return JSP_FORM;
	}

	/**
	 * Shows a form page in order to update an existing ${entity.name}
	 * @param model Spring MVC model
#foreach( $attribute in $entity.keyAttributes )
	 * @param $attribute.name  primary key element
#end
	 * @return
	 */
	@RequestMapping(value = "/form/${pkPath}")
	public String formForUpdate(Model model, ${pkPathVariables} ) {
		log("Action 'formForUpdate'");
		//--- Search the entity by its primary key and stores it in the model 
		${entity.name} ${uncapitalizedEntityName} = ${uncapitalizedEntityName}Service.findById(${pkElementsVariables});
		populateModel( model, ${uncapitalizedEntityName}, FormMode.UPDATE);		
		return JSP_FORM;
	}

	/**
	 * 'CREATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param ${uncapitalizedEntityName}  entity to be created
	 * @param bindingResult Spring MVC binding result
	 * @param model Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/create" ) // GET or POST
	public String create(@Valid ${entity.name} ${uncapitalizedEntityName}, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
		log("Action 'create'");
		try {
			if (!bindingResult.hasErrors()) {
				${entity.name} ${uncapitalizedEntityName}Created = ${uncapitalizedEntityName}Service.create(${uncapitalizedEntityName}); 
				model.addAttribute(MAIN_ENTITY_NAME, ${uncapitalizedEntityName}Created);

				//---
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
				return redirectToForm(httpServletRequest, $pkElementsGetters );
			} else {
				populateModel( model, ${uncapitalizedEntityName}, FormMode.CREATE);
				return JSP_FORM;
			}
		} catch(Exception e) {
			log("Action 'create' : Exception - " + e.getMessage() );
			messageHelper.addException(model, "${uncapitalizedEntityName}.error.create", e);
			populateModel( model, ${uncapitalizedEntityName}, FormMode.CREATE);
			return JSP_FORM;
		}
	}

	/**
	 * 'UPDATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param ${uncapitalizedEntityName}  entity to be updated
	 * @param bindingResult Spring MVC binding result
	 * @param model Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/update" ) // GET or POST
	public String update(@Valid ${entity.name} ${uncapitalizedEntityName}, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
		log("Action 'update'");
		try {
			if (!bindingResult.hasErrors()) {
				//--- Perform database operations
				${entity.name} ${uncapitalizedEntityName}Saved = ${uncapitalizedEntityName}Service.update(${uncapitalizedEntityName});
				model.addAttribute(MAIN_ENTITY_NAME, ${uncapitalizedEntityName}Saved);
				//--- Set the result message
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
				log("Action 'update' : update done - redirect");
				return redirectToForm(httpServletRequest, $pkElementsGetters);
			} else {
				log("Action 'update' : binding errors");
				populateModel( model, ${uncapitalizedEntityName}, FormMode.UPDATE);
				return JSP_FORM;
			}
		} catch(Exception e) {
			messageHelper.addException(model, "${uncapitalizedEntityName}.error.update", e);
			log("Action 'update' : Exception - " + e.getMessage() );
			populateModel( model, ${uncapitalizedEntityName}, FormMode.UPDATE);
			return JSP_FORM;
		}
	}

	/**
	 * 'DELETE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param redirectAttributes
#foreach( $attribute in $entity.keyAttributes )
	 * @param $attribute.name  primary key element
#end
	 * @return
	 */
	@RequestMapping(value = "/delete/${pkPath}") // GET or POST
	public String delete(RedirectAttributes redirectAttributes, ${pkPathVariables}) {
		log("Action 'delete'" );
		try {
			${uncapitalizedEntityName}Service.delete( ${pkElementsVariables} );
			//--- Set the result message
			messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"delete.ok"));	
		} catch(Exception e) {
			messageHelper.addException(redirectAttributes, "${uncapitalizedEntityName}.error.delete", e);
		}
		return redirectToList();
	}

	@RequestMapping(value = "/datatableJson", method = RequestMethod.GET)
	public @ResponseBody DataTableResponse<${entity.name}> getDataTableJson(@Valid DataTableRequest dataTableRequest, BindingResult bindingResult, HttpServletRequest request, Model model){
		log("getDataTableJson has called");

#foreach( $field in $allFields )
#set($htmlId      = "${uncapitalizedEntityName}_${field.name}" )
#set($htmlName    = $field.name )
#set($messageCode = "${uncapitalizedEntityName}.${field.name}" )
#set($fieldName = $field.name.substring(0,1).toUpperCase()+$field.name.substring(1,$field.name.length()))
		${field.type} ${field.name}Filter = ParamUtil.get${field.type}(request, "${field.name}Filter");
#end
		int pageSize = 10;
		if(dataTableRequest.getiDisplayLength() > 0){
			pageSize = dataTableRequest.getiDisplayLength();
		}
		
		DataTableResponse<${entity.name}> response = new DataTableResponse<${entity.name}>();
		String sortedColumn = ${entity.name}IndexEnum.getMaps().get(dataTableRequest.getiSortedColumnIndex());
		Direction sort = Sort.Direction.ASC;
		if(dataTableRequest.getsSortDirection().equals("desc")){
			sort = Sort.Direction.DESC;
		}
		Pageable pageable = new PageRequest(dataTableRequest.getPageNumber(), pageSize, sort, 
				sortedColumn);
		Long totalRecord = 0l;

		JSONObject filters = new JSONObject();

#foreach( $field in $allFields )
#if($field.isStringType())
		if(${field.name}Filter != null && !${field.name}Filter.isEmpty()){
			filters.put("${field.name}", ${field.name}Filter);	
		}
#else
		if(${field.name}Filter != null){
			filters.put("${field.name}", ${field.name}Filter);	
		}
#end
#end	
		${entity.name}Specifications spec = new ${entity.name}Specifications(filters);

		if(
#foreach( $field in $allFields )
#if($field.isStringType())
			(${field.name}Filter != null && !${field.name}Filter.isEmpty())#if( $foreach.hasNext ) ||
#end
#else
			${field.name}Filter != null#if( $foreach.hasNext ) ||
#end
#end
#end
		){
			totalRecord = ${fn.uncapitalize($entity.name)}Service.countWithSpec(spec);
		} else {
			totalRecord = ${fn.uncapitalize($entity.name)}Service.countAll();
		}
		
		if (totalRecord.intValue() > 0) {
			if (dataTableRequest.getiDisplayLength() < totalRecord.intValue()) {
				pageSize = dataTableRequest.getiDisplayLength();
			} else {
				pageSize = totalRecord.intValue();
			}
		}
		
		List<${entity.name}> pageResult = new ArrayList<${entity.name}>();
		if(
#foreach( $field in $allFields )
#if($field.isStringType())
			(${field.name}Filter != null && !${field.name}Filter.isEmpty())#if( $foreach.hasNext ) ||
#end
#else
			${field.name}Filter != null#if( $foreach.hasNext ) ||
#end
#end
#end
		){
			pageResult = ${fn.uncapitalize($entity.name)}Service.findWithSpec(spec, pageable);
			
		} else {
			pageResult = ${fn.uncapitalize($entity.name)}Service.findAll(pageable);
		}
		response.setDraw(dataTableRequest.getsEcho());
		response.setRecordsFiltered(totalRecord.intValue());
		response.setRecordsTotal(totalRecord.intValue());
		response.setData(pageResult);
		return response;
	}
}
