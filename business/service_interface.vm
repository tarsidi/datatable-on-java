## Key fields = fields in Primary Key    
#set( $keyFields = $entity.getAttributesByCriteria( $const.KEY ) )
##--------------------------------------------------------------------------------------------------------
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
## All fields ( ordered fiels : 1) fields in Primary Key 2) fields not in primary key    
#set( $allFields = $fn.concatLists($keyFields, $dataFields) )
##--------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder(${SRC})};

import java.util.List;
import org.springframework.data.domain.Pageable;

import ${ENTITY_PKG}.${entity.name};
import ${ROOT_PKG}.data.repository.specifications.${entity.name}Specifications;
/**
 * Business Service Interface for entity ${entity.name}.
 */
public interface ${entity.name}Service { 

	/**
	 * Loads an entity from the database using its Primary Key
#foreach( $attribute in $entity.keyAttributes )
	 * @param $attribute.name
#end
	 * @return entity
	 */
	${entity.name} findById( $fn.argumentsListWithType($entity.keyAttributes)  ) ;

	/**
	 * Loads all entities.
	 * @return all entities
	 */
	List<${entity.name}> findAll();

	/**
	 * Saves the given entity in the database (create or update)
	 * @param entity
	 * @return entity
	 */
	${entity.name} save(${entity.name} entity);

	/**
	 * Updates the given entity in the database
	 * @param entity
	 * @return
	 */
	${entity.name} update(${entity.name} entity);

	/**
	 * Creates the given entity in the database
	 * @param entity
	 * @return
	 */
	${entity.name} create(${entity.name} entity);

	/**
	 * Deletes an entity using its Primary Key
#foreach( $attribute in $entity.keyAttributes )
	 * @param $attribute.name
#end
	 */
	void delete( $fn.argumentsListWithType($entity.keyAttributes) );

	Long countAll();
	List<${entity.name}> findAll(Pageable pageable);
	List<${entity.name}> findWithSpec(${entity.name}Specifications specifications, Pageable pageable);
	Long countWithSpec(${entity.name}Specifications specifications);
}
