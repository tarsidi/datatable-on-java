/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
##--------------------------------------------------------------------------------------------------------
## Key fields = fields in Primary Key    
#set( $keyFields = $entity.getAttributesByCriteria( $const.KEY ) )
##--------------------------------------------------------------------------------------------------------
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
## #set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY ) )
##--------------------------------------------------------------------------------------------------------
## Mapped fields = fields in Primary Key or not in selected Links    
#set( $allMappedFields = $fn.concatLists($entity.keyAttributes, $dataFields) )
##--------------------------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder($SRC)};

import java.util.HashMap;
import java.util.Map;

public enum ${entity.name}IndexEnum {

#foreach( $field in $allMappedFields )
	#set($i = $foreach.count - 1)
    $field.name.toUpperCase() ($i) {
		@Override
        public String toString() {
            return "$field.formattedName(0)";
        }
	}#if( $foreach.hasNext ), #else; #end
	
#end

	private int val;
	private static final Map<Integer, String> maps = new HashMap<Integer, String>();
	
	private ${entity.name}IndexEnum(int val) {
		this.val = val;
	}

	public static Map<Integer, String> getMaps() {
		for(${entity.name}IndexEnum e : ${entity.name}IndexEnum.values()){
			maps.put(e.val, e.toString());
		}
		return maps;
	}

	public int getVal() {
		return val;
	}
	
}